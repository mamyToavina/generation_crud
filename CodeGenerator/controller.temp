package [packageName].[classNameLower];

import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestParam;
import [packageModel].[classNameLower].[className];
import [packageRepository].[classNameLower].[className]Repository;
import java.util.List;
[importSpace]
[importRepository]
@Controller
@RequestMapping("/[classNameLower]")
public class [className]Controller {
    @Autowired
    private [className]Repository [classNameLower]Repository;
    [otherRepositoryDeclaration]

    @GetMapping("/insert_form")
    public String insert_form(Model model) {
	[passageVariable]
	model.addAttribute("[classNameLower]", new [className]());
        return "[classNameLower]/Insert";
    }

    @GetMapping("/update_form/{id}")
    public String update_form(@PathVariable Long id, Model model) {
	[passageVariable]
	[className] [classNameLower] = [classNameLower]Repository.findById(id).orElse(null);
	model.addAttribute("[classNameLower]",[classNameLower]);
        return "[classNameLower]/Update";
    }

    @GetMapping("/get_all")
    public String get_all(@RequestParam(defaultValue = "0") int page, Model model) {
        int pageSize = 6;
        Pageable pageable = PageRequest.of(page, pageSize);
        Page<[className]> page[className]s = [classNameLower]Repository.findAll(pageable);
        model.addAttribute("[classNameLower]s", page[className]s.getContent());
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", page[className]s.getTotalPages());
        return "[classNameLower]/Liste";
    }
    
    @PostMapping("/create")
    public String create(@ModelAttribute [className] [classNameLower]) {
        try {
            [classNameLower]Repository.save([classNameLower]);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "redirect:/[classNameLower]/get_all";
    }

    @PostMapping("/update")
    public String update(@ModelAttribute [className] [classNameLower]) {
        try {
           [classNameLower]Repository.save([classNameLower]);
        } catch (Exception e) {
           e.printStackTrace();
           return "[classNameLower]/Update";
        }
        return "redirect:/[classNameLower]/get_all";
    }

    @GetMapping("/delete/{id}")
    public String delete(@PathVariable("id") [typeId] id) {
        [classNameLower]Repository.deleteById(id);
        return "redirect:/[classNameLower]/get_all";
    }
}
